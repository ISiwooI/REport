using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

public static class GenerateActivity
{
    #region Key
    public static readonly string className = "className";
    public static readonly string name = "name";
    public static readonly string description = "description";
    public static readonly string simpleDescription = "simpleDescription";
    public static readonly string isAvoidable = "isAvoidable";
    public static readonly string isSudden = "isSudden";
    public static readonly string floatParams = "floatParams";
    public static readonly string timeDuration = "timeDuration";
    public static readonly string delete = "delete";
    public static readonly string disabled = "disabled";
    #endregion Key

    #region Path
    private static readonly string targetPath = "Assets/scripts/AutoGenerated/Activity/Generated/";
    private static readonly string EnumPath = "Assets/scripts/AutoGenerated/Activity/ActivityKind.cs";
    private static readonly string DelegatorPath = "Assets/scripts/AutoGenerated/Activity/ActivityDeligator.cs";
    private static readonly string TemplatePath = "Assets/scripts/AutoGenerated/Activity/Templetes/ActivityTemplate";
    private static readonly string CSVPath = "Assets/scripts/AutoGenerated/Activity/ActivityData.csv";
    private static readonly string BackupsPath = "Assets/scripts/AutoGenerated/Activity/Backups~/";
    #endregion Path

    #region TemplateString

    public static RPSurroundText classNameTemplate = new RPSurroundText("/*ActivityNameStart*/", "/*ActivityNameEnd*/");
    public static RPSurroundText nameTemplate = new RPSurroundText("/*nameStart*/", "/*nameEnd*/");
    public static RPSurroundText simpleDescriptionTemplate = new RPSurroundText("/*simpleDescriptionStart*/", "/*simpleDescriptionEnd*/");
    public static RPSurroundText isSuddenTemplate = new RPSurroundText("/*isSuddenStart*/", "/*isSuddenEnd*/");
    public static RPSurroundText isAvoidableTemplate = new RPSurroundText("/*isAvoidableStart*/", "/*isAvoidableEnd*/");
    public static RPSurroundText descriptionTemplate = new RPSurroundText("/*DescriptionStart", "DescriptionEnd*/");
    public static RPSurroundText timeDurationTemplate = new RPSurroundText("/*timeDurationStart*/", "/*timeDurationEnd*/");
    public static RPSurroundText floatParamTemplate = new RPSurroundText("//ParamsStart", "//ParamsEnd");
    public static RPSurroundText ClassEnumTemplate = new RPSurroundText("/*EnumStart*/", "/*EnumEnd*/");
    public static RPSurroundText enumTemplate = new RPSurroundText("//start", "//end");
    public static RPSurroundText delegatorTemplate = new RPSurroundText("//activityListinit", "//activityLIstinitend");

    #endregion TemplateString

    [MenuItem("Assets/Test/CSVPrint")]
    public static void CSVPrintTest()
    {
        if (File.Exists(CSVPath))
        {

            List<Dictionary<string, object>> csv = CSVReader.Read(CSVPath);

            foreach (Dictionary<string, object> kvp in csv)
            {
                if (kvp.ContainsKey("delete"))
                {
                    kvp.TryGetValue("delete", out var value);
                    Debug.Log(value + value.GetType().ToString());
                }
            }
        }
    }
    [MenuItem("Assets/AutoGenerate/Activity/Backup")]
    public static void BackupScriptes()
    {
        string folderPath = BackupsPath + System.DateTime.Now.Year + "_" + System.DateTime.Now.Month + "_" + System.DateTime.Now.Day + "_" + System.DateTime.Now.Hour + System.DateTime.Now.Minute + System.DateTime.Now.Second + "/";
        if (Directory.Exists(folderPath))
        {
            throw new System.Exception("이미 있는 폴더");
        }
        else
        {
            Directory.CreateDirectory(folderPath);
            Utill.CopyDirectory(targetPath, folderPath);
            Debug.Log("BackupComplete");
        }
    }
    static void DeleteScriptes()
    {

    }

    static void DisableScriptes()
    {
        throw new System.NotImplementedException();
    }


    [MenuItem("Assets/AutoGenerate/Activity/GenerateScripts")]
    static void GenerateScripts()
    {
        List<Dictionary<string, object>> csv = CSVReader.Read(CSVPath);
        string templeteString = "";
        if (!isVaild(csv))
        {
            Debug.LogWarning("CSV_vaildChackFaild");
            return;
        }
        if (File.Exists(TemplatePath))
        {
            templeteString = File.ReadAllText(TemplatePath);
            if (templeteString == "") Debug.LogWarning("Template Is Empty");
        }
        else
        {
            Debug.LogWarning("templete not found");
            return;
        }
        foreach (Dictionary<string, object> kvp in csv)
        {
            string temp;
            if (File.Exists(targetPath + (kvp[className] as string) + ".cs")) temp = File.ReadAllText(targetPath + "GA" + (kvp[className] as string) + ".cs");
            else temp = templeteString;

            temp = Regex.Replace(temp, classNameTemplate.regPattern, classNameTemplate.Startstr + "GA" + (kvp[className] as string) + classNameTemplate.Endstr);
            temp = Regex.Replace(temp, nameTemplate.regPattern, nameTemplate.Startstr + "\"" + (kvp[name] as string) + "\"" + nameTemplate.Endstr);
            temp = Regex.Replace(temp, simpleDescriptionTemplate.regPattern, simpleDescriptionTemplate.Startstr + "\"" + (kvp[simpleDescription] as string) + "\"" + simpleDescriptionTemplate.Endstr);
            temp = Regex.Replace(temp, isSuddenTemplate.regPattern, isSuddenTemplate.Startstr + kvp[isSudden].ToString().ToLowerInvariant() + isSuddenTemplate.Endstr);
            temp = Regex.Replace(temp, isAvoidableTemplate.regPattern, isAvoidableTemplate.Startstr + kvp[isAvoidable].ToString().ToLowerInvariant() + isAvoidableTemplate.Endstr);
            temp = Regex.Replace(temp, descriptionTemplate.regPattern, descriptionTemplate.Startstr + "\n\t\t" + (kvp[description] as string) + "\n\t\t" + descriptionTemplate.Endstr);
            temp = Regex.Replace(temp, timeDurationTemplate.regPattern, timeDurationTemplate.Startstr + kvp[timeDuration].ToString() + timeDurationTemplate.Endstr);
            temp = Regex.Replace(temp, ClassEnumTemplate.regPattern, ClassEnumTemplate.Startstr + kvp[className].ToString() + ClassEnumTemplate.Endstr);
            string changestr = "";
            changestr += floatParamTemplate.Startstr;
            if (kvp[floatParams] as string != "" && kvp[floatParams] != null)
            {
                string[] floatParamAry = (kvp[floatParams] as string).Split(',');

                int i = 0;
                foreach (string floatParam in floatParamAry)
                {


                    Debug.Log("Generated float Param" + i + ": " + floatParam);
                    changestr += "\n\t\t" + "public readonly float floatParam" + i + "=" + floatParam + ";";
                    i++;

                }
                changestr += "\n\t\t";

            }
            changestr += floatParamTemplate.Endstr;
            temp = Regex.Replace(temp, floatParamTemplate.regPattern, changestr);
            File.WriteAllText(targetPath + "GA" + (kvp[className] as string) + ".cs", temp);
        }

    }
    static bool isVaild(List<Dictionary<string, object>> csv)
    {
        if (csv == null)
        {
            Debug.LogWarning("csv is null");
            return false;
        }
        string[] keys = { className, name, description, simpleDescription, isAvoidable, isSudden, floatParams, timeDuration, delete, disabled };
        if (!CSVReader.HasKey(csv, keys)) { Debug.LogWarning("csv Has not keys"); return false; }
        if (!CSVReader.isUnique(csv, className)) { Debug.LogWarning("csv Not Unique"); return false; }
        if (!CSVReader.ColumnTypeCheck(csv, className, Utill.TypeEnum.String)) { Debug.LogWarning(className + "is not string"); return false; }
        if (!CSVReader.ColumnTypeCheck(csv, name, Utill.TypeEnum.String)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, description, Utill.TypeEnum.String)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, simpleDescription, Utill.TypeEnum.String)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, isAvoidable, Utill.TypeEnum.Bool)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, isSudden, Utill.TypeEnum.Bool)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, floatParams, Utill.TypeEnum.String)) { Debug.LogWarning(floatParams + "is not string"); return false; }

        if (!CSVReader.ColumnTypeCheck(csv, timeDuration, Utill.TypeEnum.Int)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, delete, Utill.TypeEnum.Bool)) return false;
        if (!CSVReader.ColumnTypeCheck(csv, disabled, Utill.TypeEnum.Bool)) return false;
        return true;
    }
    [MenuItem("Assets/AutoGenerate/Activity/GenerateDeigator")]
    static void UpdateDelegator()
    {
        List<Dictionary<string, object>> csv = CSVReader.Read(CSVPath);
        if (!isVaild(csv))
        {
            Debug.LogWarning("CSV_vaildChackFaild");
            return;
        }
        if (!File.Exists(DelegatorPath))
        {
            Debug.LogWarning("Enum File Not Found");
            return;
        }
        string temp = File.ReadAllText(DelegatorPath);
        string changestr = "";
        foreach (Dictionary<string, object> kvp in csv)
        {
            /*temp = new GAasdf123();
            activities.Add(temp.GetKind(), new GAasdf123());*/
            changestr += "\n\t\ttemp = new GA" + kvp[className] as string + "();\n\t\tactivities.Add(temp.GetKind(),temp);";
            //changestr += "\n" + "activities.AddLast(new " + "GA" + (kvp[className] as string) + "());";
        }
        changestr += "\n\t\t";
        changestr = delegatorTemplate.Startstr + changestr + delegatorTemplate.Endstr;
        temp = Regex.Replace(temp, delegatorTemplate.regPattern, changestr);
        File.WriteAllText(DelegatorPath, temp);
    }
    [MenuItem("Assets/AutoGenerate/Activity/GenerateEnum")]
    static void UpdateEnum()
    {
        List<Dictionary<string, object>> csv = CSVReader.Read(CSVPath);
        if (!isVaild(csv))
        {
            Debug.LogWarning("CSV_vaildChackFaild");
            return;
        }
        if (!File.Exists(EnumPath))
        {
            Debug.LogWarning("Enum File Not Found");
            return;
        }
        string temp = File.ReadAllText(EnumPath);
        string changestr = "";
        foreach (Dictionary<string, object> kvp in csv)
        {
            changestr += "\n" + kvp[className] + ",";
        }
        changestr.TrimEnd(',');
        changestr += '\n';
        changestr = enumTemplate.Startstr + changestr + enumTemplate.Endstr;
        temp = Regex.Replace(temp, enumTemplate.regPattern, changestr);
        File.WriteAllText(EnumPath, temp);
    }



}
